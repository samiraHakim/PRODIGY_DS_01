# -*- coding: utf-8 -*-
"""Prodigy_DS_Task01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r-CWaXtqWe5lTMsdnwyvFAEpLlDc0UZu

Data Science Intern

**Task-01**

Create a bar chart or histogram to visualize the distribution of a categorical or continuous variable, such as the distribution of ages or genders in a population.



I've chosen Dairy Goods Sales Dataset
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv("/content/dairy_dataset.csv")
df

df.columns

# Count Plot for a Categorical Variable (e.g., Sales Channel)
plt.figure(figsize=(8, 6))
sns.countplot(data=df, x="Sales Channel")
plt.title("Count of Sales Channels")
plt.xlabel("Sales Channel")
plt.ylabel("Count")
plt.show()

# Calculate the total sales for each product
total_sales = df.groupby('Product Name')['Quantity Sold (liters/kg)'].sum().reset_index()

# Create a barplot for total sales of dairy products by product name
plt.figure(figsize=(12, 6))
sns.barplot(data=total_sales, x='Product Name', y='Quantity Sold (liters/kg)')
plt.xticks(rotation=45)
plt.title('Total Sales of Dairy Products by Product Name')
plt.xlabel('Product Name')
plt.ylabel('Total Sales (liters/kg)')
plt.show()

# Group and aggregate the data to calculate the total quantity by storage condition
total_quantity_by_condition = df.groupby('Storage Condition')['Quantity in Stock (liters/kg)'].sum().reset_index()

# Create a barplot to show the impact of storage conditions on the quantity of available dairy products
plt.figure(figsize=(10, 6))
sns.barplot(data=total_quantity_by_condition, x='Storage Condition', y='Quantity in Stock (liters/kg)')
plt.xticks(rotation=45)
plt.title('Impact of Storage Conditions on Quantity of Available Dairy Products')
plt.xlabel('Storage Condition')
plt.ylabel('Total Quantity (liters/kg)')
plt.show()

# Group and aggregate the data to calculate the total value by location
total_value_by_location = df.groupby('Location')['Total Value'].sum().reset_index()

# Create a barplot to show the total value of dairy products by location
plt.figure(figsize=(12, 6))
sns.barplot(data=total_value_by_location, x='Location', y='Total Value')
plt.xticks(rotation=90)
plt.title('Barplot of Total Value of Dairy Products by Location')
plt.xlabel('Location')
plt.ylabel('Total Value (INR)')
plt.show()

plt.figure(figsize=(12, 6))
sns.countplot(data=df, x='Brand', order=df['Brand'].value_counts().index)
plt.xticks(rotation=90)
plt.title('Countplot for Total Value by Brand')
plt.xlabel('Brand')
plt.ylabel('Count of Products')
plt.show()

# List of columns for which you want to create histograms
columns_to_plot = ['Total Land Area (acres)', 'Quantity (liters/kg)', 'Price per Unit', 'Total Value',
                   'Shelf Life (days)', 'Quantity Sold (liters/kg)', 'Price per Unit (sold)',
                   'Approx. Total Revenue(INR)', 'Quantity in Stock (liters/kg)',
                   'Minimum Stock Threshold (liters/kg)', 'Reorder Quantity (liters/kg)']

# Define a list of colors for each histogram (without trailing spaces)
colors = ['#6FBB0D', '#DAF7A6', '#2BCED1', '#D12B63', '#C8868B', '#E9F07F', '#581845', '#FF5733', '#FFC300', '#900C3F', '#581845']

# Create histograms for each of the specified columns with custom colors
for i, column in enumerate(columns_to_plot):
    plt.figure(figsize=(8, 6))
    plt.hist(df[column], bins=20, edgecolor='k', color=colors[i])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()